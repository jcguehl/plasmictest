// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a8YFUxgfWi7wVnE4zUTdHu
// Component: KPplLXex2y
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: fVoibZa2HhV/component
import Button from "../../Button"; // plasmic-import: P_Sp_1dQVxN/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: a8YFUxgfWi7wVnE4zUTdHu/projectcss
import sty from "./PlasmicNewCustomer.module.css"; // plasmic-import: KPplLXex2y/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: snzorMKzcC0/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: RgzVS264hj5/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: WOPiH_ZD-nn/icon

export type PlasmicNewCustomer__VariantMembers = {};

export type PlasmicNewCustomer__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewCustomer__VariantsArgs;
export const PlasmicNewCustomer__VariantProps = new Array<VariantPropType>();

export type PlasmicNewCustomer__ArgsType = {};
type ArgPropType = keyof PlasmicNewCustomer__ArgsType;
export const PlasmicNewCustomer__ArgProps = new Array<ArgPropType>();

export type PlasmicNewCustomer__OverridesType = {
  root?: p.Flex<"div">;
  firstName?: p.Flex<typeof TextInput>;
  lastName?: p.Flex<typeof TextInput>;
  quote?: p.Flex<typeof Button>;
};

export interface DefaultNewCustomerProps {
  className?: string;
}

function PlasmicNewCustomer__RenderFunc(props: {
  variants: PlasmicNewCustomer__VariantsArgs;
  args: PlasmicNewCustomer__ArgsType;
  overrides: PlasmicNewCustomer__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__smyT3)}>
            {true ? (
              <TextInput
                data-plasmic-name={"firstName"}
                data-plasmic-override={overrides.firstName}
                aria-label={"First Name" as const}
                className={classNames("__wab_instance", sty.firstName)}
                name={"" as const}
                required={true}
              />
            ) : null}

            <TextInput
              data-plasmic-name={"lastName"}
              data-plasmic-override={overrides.lastName}
              aria-label={"Last Name" as const}
              className={classNames("__wab_instance", sty.lastName)}
            />
          </div>

          <div className={classNames(projectcss.all, sty.freeBox___98Pef)}>
            <Button
              data-plasmic-name={"quote"}
              data-plasmic-override={overrides.quote}
              className={classNames("__wab_instance", sty.quote)}
              link={"/quote-result" as const}
            >
              {"Quote"}
            </Button>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "firstName", "lastName", "quote"],
  firstName: ["firstName"],
  lastName: ["lastName"],
  quote: ["quote"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  firstName: typeof TextInput;
  lastName: typeof TextInput;
  quote: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewCustomer__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewCustomer__VariantsArgs;
    args?: PlasmicNewCustomer__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewCustomer__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNewCustomer__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNewCustomer__ArgProps,
          internalVariantPropNames: PlasmicNewCustomer__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNewCustomer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewCustomer";
  } else {
    func.displayName = `PlasmicNewCustomer.${nodeName}`;
  }
  return func;
}

export const PlasmicNewCustomer = Object.assign(
  // Top-level PlasmicNewCustomer renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    firstName: makeNodeComponent("firstName"),
    lastName: makeNodeComponent("lastName"),
    quote: makeNodeComponent("quote"),

    // Metadata about props expected for PlasmicNewCustomer
    internalVariantProps: PlasmicNewCustomer__VariantProps,
    internalArgProps: PlasmicNewCustomer__ArgProps
  }
);

export default PlasmicNewCustomer;
/* prettier-ignore-end */
